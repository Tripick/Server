// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TripickServer.Models;

namespace TripickServer.Migrations
{
    [DbContext(typeof(TripickContext))]
    [Migration("20210517220515_PlaceFlagsDbSet")]
    partial class PlaceFlagsDbSet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AppUserTrip", b =>
                {
                    b.Property<int>("GuestTripsId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("GuestTripsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("AppUserTrip");
                });

            modelBuilder.Entity("AppUserTrip1", b =>
                {
                    b.Property<int>("SubscribersId")
                        .HasColumnType("integer");

                    b.Property<int>("WatchedTripsId")
                        .HasColumnType("integer");

                    b.HasKey("SubscribersId", "WatchedTripsId");

                    b.HasIndex("WatchedTripsId");

                    b.ToTable("AppUserTrip1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TripickServer.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TripickServer.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TripickServer.Models.BoundingBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("DestinationId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxLat")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxLon")
                        .HasColumnType("double precision");

                    b.Property<double>("MinLat")
                        .HasColumnType("double precision");

                    b.Property<double>("MinLon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("BoundingBox");
                });

            modelBuilder.Entity("TripickServer.Models.ConfigFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVal")
                        .HasColumnType("integer");

                    b.Property<int>("MinVal")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("ValType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigReviewFlags");
                });

            modelBuilder.Entity("TripickServer.Models.Configuration", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("TripickServer.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TripickServer.Models.CountryArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxLat")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxLon")
                        .HasColumnType("double precision");

                    b.Property<double>("MinLat")
                        .HasColumnType("double precision");

                    b.Property<double>("MinLon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryAreas");
                });

            modelBuilder.Entity("TripickServer.Models.CountryPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("PolygonId")
                        .HasColumnType("integer");

                    b.Property<double>("index")
                        .HasColumnType("double precision");

                    b.Property<double>("x")
                        .HasColumnType("double precision");

                    b.Property<double>("y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.ToTable("CountryPoint");
                });

            modelBuilder.Entity("TripickServer.Models.CountryPolygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryPolygon");
                });

            modelBuilder.Entity("TripickServer.Models.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdItinerary")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdItinerary");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("TripickServer.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMapFrame")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("TripickServer.Models.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.Property<int>("Min")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.HasIndex("IdUser");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("TripickServer.Models.Friendship", b =>
                {
                    b.Property<int>("IdOwner")
                        .HasColumnType("integer");

                    b.Property<int>("IdFriend")
                        .HasColumnType("integer");

                    b.HasKey("IdOwner", "IdFriend");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("TripickServer.Models.Guide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdTrip");

                    b.HasIndex("TypeId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("TripickServer.Models.Hashtag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("GuideId")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.HasIndex("GuideId");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("TripickServer.Models.ImageAppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdOwner")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner")
                        .IsUnique();

                    b.ToTable("ImageAppUser");
                });

            modelBuilder.Entity("TripickServer.Models.ImageGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdGuide")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdGuide");

                    b.ToTable("ImageGuides");
                });

            modelBuilder.Entity("TripickServer.Models.ImagePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IdUploader")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdPlace");

                    b.HasIndex("IdUploader");

                    b.ToTable("ImagePlaces");
                });

            modelBuilder.Entity("TripickServer.Models.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustomized")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip")
                        .IsUnique();

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("TripickServer.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("LatitudeDelta")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("LongitudeDelta")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TripickServer.Models.MapPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.ToTable("MapPoint");
                });

            modelBuilder.Entity("TripickServer.Models.MapTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdTrip");

                    b.ToTable("MapTiles");
                });

            modelBuilder.Entity("TripickServer.Models.Pick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrip")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdPlace");

                    b.HasIndex("IdTrip");

                    b.HasIndex("IdUser");

                    b.ToTable("Picks");
                });

            modelBuilder.Entity("TripickServer.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BusinessStatus")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameTranslated")
                        .HasColumnType("text");

                    b.Property<double>("NbRating")
                        .HasColumnType("double precision");

                    b.Property<string>("PlaceId")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int?>("Touristy")
                        .HasColumnType("integer");

                    b.Property<string>("Types")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TripickServer.Models.PlaceFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdConfig")
                        .HasColumnType("integer");

                    b.Property<int>("IdPlace")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdConfig");

                    b.HasIndex("IdPlace");

                    b.ToTable("FlagPlace");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdConfig")
                        .HasColumnType("integer");

                    b.Property<int>("IdReview")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdConfig");

                    b.HasIndex("IdReview");

                    b.ToTable("ReviewFlags");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer");

                    b.Property<int>("IdGuide")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdGuide");

                    b.ToTable("ReviewGuides");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdReview")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdReview");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer");

                    b.Property<int>("IdPlace")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdPlace");

                    b.ToTable("ReviewPlace");
                });

            modelBuilder.Entity("TripickServer.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DistanceFromPrevious")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdDay")
                        .HasColumnType("integer");

                    b.Property<int?>("IdPick")
                        .HasColumnType("integer");

                    b.Property<int?>("IdType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdDay");

                    b.HasIndex("IdPick");

                    b.HasIndex("IdType");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("TripickServer.Models.ToBring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<int?>("DayId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("IdType");

                    b.ToTable("ToBrings");
                });

            modelBuilder.Entity("TripickServer.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("EndLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLatitudeDelta")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLongitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLongitudeDelta")
                        .HasColumnType("double precision");

                    b.Property<int>("IdOwner")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("StartLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartLatitudeDelta")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartLongitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartLongitudeDelta")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TripickServer.Models.TypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("GuideId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NbPersons")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.ToTable("TypeGroups");
                });

            modelBuilder.Entity("TripickServer.Models.TypeGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeGuide");
                });

            modelBuilder.Entity("TripickServer.Models.TypeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeSteps");
                });

            modelBuilder.Entity("TripickServer.Models.TypeToBring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeToBrings");
                });

            modelBuilder.Entity("TripickServer.Models.VoteReviewGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer");

                    b.Property<int>("IdReviewGuide")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUp")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdReviewGuide");

                    b.ToTable("VoteReviewGuides");
                });

            modelBuilder.Entity("TripickServer.Models.VoteReviewPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer");

                    b.Property<int>("IdReviewPlace")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUp")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdReviewPlace");

                    b.ToTable("VoteReviewPlace");
                });

            modelBuilder.Entity("AppUserTrip", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("GuestTripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserTrip1", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("WatchedTripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TripickServer.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("TripickServer.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripickServer.Models.BoundingBox", b =>
                {
                    b.HasOne("TripickServer.Models.Destination", null)
                        .WithMany("BoundingBoxes")
                        .HasForeignKey("DestinationId");
                });

            modelBuilder.Entity("TripickServer.Models.CountryArea", b =>
                {
                    b.HasOne("TripickServer.Models.Country", "Country")
                        .WithMany("Areas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TripickServer.Models.CountryPoint", b =>
                {
                    b.HasOne("TripickServer.Models.CountryPolygon", "Polygon")
                        .WithMany("Points")
                        .HasForeignKey("PolygonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Polygon");
                });

            modelBuilder.Entity("TripickServer.Models.CountryPolygon", b =>
                {
                    b.HasOne("TripickServer.Models.Country", "Country")
                        .WithMany("Polygons")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TripickServer.Models.Day", b =>
                {
                    b.HasOne("TripickServer.Models.Itinerary", "Itinerary")
                        .WithMany("Days")
                        .HasForeignKey("IdItinerary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("TripickServer.Models.Destination", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripickServer.Models.Filter", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripickServer.Models.Friendship", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Owner")
                        .WithMany("Friendships")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TripickServer.Models.Guide", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.TypeGuide", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Author");

                    b.Navigation("Trip");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TripickServer.Models.Hashtag", b =>
                {
                    b.HasOne("TripickServer.Models.Guide", null)
                        .WithMany("Hashtags")
                        .HasForeignKey("GuideId");
                });

            modelBuilder.Entity("TripickServer.Models.ImageAppUser", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Owner")
                        .WithOne("Photo")
                        .HasForeignKey("TripickServer.Models.ImageAppUser", "IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TripickServer.Models.ImageGuide", b =>
                {
                    b.HasOne("TripickServer.Models.Guide", "Guide")
                        .WithMany("Images")
                        .HasForeignKey("IdGuide")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("TripickServer.Models.ImagePlace", b =>
                {
                    b.HasOne("TripickServer.Models.Place", "Place")
                        .WithMany("Images")
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.AppUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("IdUploader")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("TripickServer.Models.Itinerary", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithOne("Itinerary")
                        .HasForeignKey("TripickServer.Models.Itinerary", "IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripickServer.Models.Location", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithOne("Region")
                        .HasForeignKey("TripickServer.Models.Location", "IdTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripickServer.Models.MapPoint", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany("Polygon")
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripickServer.Models.MapTile", b =>
                {
                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany("Tiles")
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripickServer.Models.Pick", b =>
                {
                    b.HasOne("TripickServer.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripickServer.Models.PlaceFlag", b =>
                {
                    b.HasOne("TripickServer.Models.ConfigFlag", "Config")
                        .WithMany()
                        .HasForeignKey("IdConfig")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Place", "Place")
                        .WithMany("Flags")
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewFlag", b =>
                {
                    b.HasOne("TripickServer.Models.ConfigFlag", "Config")
                        .WithMany()
                        .HasForeignKey("IdConfig")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.ReviewPlace", "Review")
                        .WithMany("Flags")
                        .HasForeignKey("IdReview")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewGuide", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Guide", "Guide")
                        .WithMany("Reviews")
                        .HasForeignKey("IdGuide")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewImage", b =>
                {
                    b.HasOne("TripickServer.Models.ReviewPlace", "Review")
                        .WithMany("Pictures")
                        .HasForeignKey("IdReview")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewPlace", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TripickServer.Models.Step", b =>
                {
                    b.HasOne("TripickServer.Models.Day", "Day")
                        .WithMany("Steps")
                        .HasForeignKey("IdDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.Pick", "Pick")
                        .WithMany()
                        .HasForeignKey("IdPick");

                    b.HasOne("TripickServer.Models.TypeStep", "Type")
                        .WithMany()
                        .HasForeignKey("IdType");

                    b.Navigation("Day");

                    b.Navigation("Pick");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TripickServer.Models.ToBring", b =>
                {
                    b.HasOne("TripickServer.Models.Day", null)
                        .WithMany("ToBrings")
                        .HasForeignKey("DayId");

                    b.HasOne("TripickServer.Models.TypeToBring", "Type")
                        .WithMany()
                        .HasForeignKey("IdType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TripickServer.Models.Trip", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Owner")
                        .WithMany("Trips")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TripickServer.Models.TypeGroup", b =>
                {
                    b.HasOne("TripickServer.Models.Guide", null)
                        .WithMany("RecommendedGroups")
                        .HasForeignKey("GuideId");
                });

            modelBuilder.Entity("TripickServer.Models.VoteReviewGuide", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.ReviewGuide", "ReviewGuide")
                        .WithMany("Votes")
                        .HasForeignKey("IdReviewGuide")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ReviewGuide");
                });

            modelBuilder.Entity("TripickServer.Models.VoteReviewPlace", b =>
                {
                    b.HasOne("TripickServer.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripickServer.Models.ReviewPlace", "ReviewPlace")
                        .WithMany("Votes")
                        .HasForeignKey("IdReviewPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ReviewPlace");
                });

            modelBuilder.Entity("TripickServer.Models.AppUser", b =>
                {
                    b.Navigation("Friendships");

                    b.Navigation("Photo");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TripickServer.Models.Country", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Polygons");
                });

            modelBuilder.Entity("TripickServer.Models.CountryPolygon", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("TripickServer.Models.Day", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("ToBrings");
                });

            modelBuilder.Entity("TripickServer.Models.Destination", b =>
                {
                    b.Navigation("BoundingBoxes");
                });

            modelBuilder.Entity("TripickServer.Models.Guide", b =>
                {
                    b.Navigation("Hashtags");

                    b.Navigation("Images");

                    b.Navigation("RecommendedGroups");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TripickServer.Models.Itinerary", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("TripickServer.Models.Place", b =>
                {
                    b.Navigation("Flags");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewGuide", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TripickServer.Models.ReviewPlace", b =>
                {
                    b.Navigation("Flags");

                    b.Navigation("Pictures");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TripickServer.Models.Trip", b =>
                {
                    b.Navigation("Itinerary");

                    b.Navigation("Polygon");

                    b.Navigation("Region");

                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
